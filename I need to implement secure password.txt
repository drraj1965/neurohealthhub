I need to implement secure passwordless authentication that integrates with the NeuroHealthDashboard application. This requires:

1. Adding token-based authentication to automatically log in users from NeuroHealthDashboard
2. Supporting direct authentication for the following three doctors:
   - Dr. Rajshekher Garikapati (doctornerves@gmail.com)
   - Dr. Ummul Kiram Zain Ul Abedin (dr.ukzain@gmail.com)
   - Dr. Ponnu Sankaran Pillai (ponnusankar100@gmail.com)
3. Supporting bidirectional content sharing with NeuroHealthDashboard

The integration should be implemented in the following steps:

## Step 1: Add Token Authentication Component

Create a new component or file called `AuthBridge.js` or similar with the following code:

```javascript
// AuthBridge.js - Integration with NeuroHealthDashboard
import { useState, useEffect } from 'react';
import { useAuth } from './your-auth-context-file';  // Update with your actual auth context path

// Known doctor accounts for direct authentication (if needed)
const KNOWN_DOCTORS = [
  { email: "doctornerves@gmail.com", name: "Dr. Rajshekher Garikapati" },
  { email: "dr.ukzain@gmail.com", name: "Dr. Ummul Kiram Zain Ul Abedin" },
  { email: "ponnusankar100@gmail.com", name: "Dr. Ponnu Sankaran Pillai" }
];

export default function AuthBridge() {
  const { login, user, setUser } = useAuth();  // Adjust according to your auth context
  const [isProcessing, setIsProcessing] = useState(false);
  const [authResult, setAuthResult] = useState(null);
  
  useEffect(() => {
    // Only run once when component mounts
    checkForExternalAuth();
  }, []);
  
  /**
   * Extract authentication data from URL parameters
   */
  function getAuthDataFromURL() {
    const params = new URLSearchParams(window.location.search);
    
    // Get all possible auth parameters
    return {
      token: params.get('token'),
      userId: params.get('userId'),
      userEmail: params.get('userEmail'),
      userName: params.get('userName'),
      userType: params.get('userType') || 'user',
      password: params.get('password'),
      emergency_bypass: params.get('emergency_bypass') === 'true',
      direct_auth: params.get('direct_auth') === 'true',
      auth_payload: params.get('auth_payload'),
      // App-specific parameters
      articlegen_password: params.get('articlegen_password'),
      force_login: params.get('force_login') === 'true',
      bypass_login: params.get('bypass_login') === 'true'
    };
  }
  
  /**
   * Decode Base64 auth payload if present
   */
  function decodeAuthPayload(encodedPayload) {
    try {
      return JSON.parse(atob(encodedPayload));
    } catch (error) {
      console.error("Failed to decode auth payload:", error);
      return null;
    }
  }
  
  /**
   * Check if a user email is a known doctor
   */
  function isKnownDoctor(email) {
    return KNOWN_DOCTORS.some(doctor => doctor.email === email);
  }
  
  /**
   * Check for external authentication data and process it
   */
  async function checkForExternalAuth() {
    if (isProcessing || user) return; // Don't process if already logged in or processing
    
    try {
      setIsProcessing(true);
      
      // Get auth data from URL
      const authData = getAuthDataFromURL();
      console.log("Auth data from URL:", authData);
      
      // If no auth data, do nothing
      if (!authData.token && !authData.userEmail && !authData.auth_payload) {
        setIsProcessing(false);
        return;
      }
      
      // Process auth payload if present (highest priority)
      if (authData.auth_payload) {
        const decodedPayload = decodeAuthPayload(authData.auth_payload);
        if (decodedPayload) {
          console.log("Processing decoded auth payload:", decodedPayload);
          
          // Create user object from payload
          const userData = {
            id: decodedPayload.userId,
            email: decodedPayload.userEmail,
            name: decodedPayload.userName,
            type: decodedPayload.userType,
            token: decodedPayload.token
          };
          
          // Store token in localStorage for future requests
          localStorage.setItem('auth_token', decodedPayload.token);
          localStorage.setItem('user_email', decodedPayload.userEmail);
          localStorage.setItem('user_id', decodedPayload.userId);
          localStorage.setItem('user_name', decodedPayload.userName);
          
          // Set user in auth context
          setUser(userData);
          setAuthResult({
            success: true,
            method: 'auth_payload',
            message: `Authenticated via NeuroHealthDashboard payload as ${userData.name}`
          });
          setIsProcessing(false);
          return;
        }
      }
      
      // Process direct token (second priority)
      if (authData.token && authData.userEmail) {
        console.log("Processing direct token authentication");
        
        // Validate if this is a known doctor
        if (isKnownDoctor(authData.userEmail)) {
          // For known doctors, accept the token directly
          const userData = {
            id: authData.userId,
            email: authData.userEmail,
            name: authData.userName,
            type: 'admin',
            token: authData.token
          };
          
          // Store token in localStorage for future requests
          localStorage.setItem('auth_token', authData.token);
          localStorage.setItem('user_email', authData.userEmail);
          localStorage.setItem('user_id', authData.userId);
          localStorage.setItem('user_name', authData.userName);
          
          // Set user in auth context
          setUser(userData);
          setAuthResult({
            success: true,
            method: 'direct_token',
            message: `Authenticated doctor ${userData.name} via direct token`
          });
          setIsProcessing(false);
          return;
        }
        
        // For other users, validate token with an API call
        try {
          // Implement token validation with your API
          // const response = await fetch('/api/validate-token', {
          //   method: 'POST',
          //   headers: { 'Content-Type': 'application/json' },
          //   body: JSON.stringify({ token: authData.token })
          // });
          // const result = await response.json();
          
          // If validation succeeds, set the user
          // if (result.valid) {
          //   setUser(result.user);
          //   localStorage.setItem('auth_token', authData.token);
          //   setAuthResult({
          //     success: true,
          //     method: 'validated_token',
          //     message: `Authenticated as ${result.user.name} via validated token`
          //   });
          // }
        } catch (error) {
          console.error("Token validation failed:", error);
        }
      }
      
      // Process direct password (third priority)
      if (authData.password && authData.userEmail) {
        console.log("Processing direct password authentication");
        
        try {
          // Try to log in with the provided credentials
          const success = await login(authData.userEmail, authData.password);
          
          if (success) {
            setAuthResult({
              success: true,
              method: 'direct_password',
              message: `Authenticated as ${authData.userName || authData.userEmail} via password`
            });
            setIsProcessing(false);
            return;
          }
        } catch (loginError) {
          console.error("Direct login failed:", loginError);
        }
      }
      
      // If reached here, all authentication methods failed
      setAuthResult({
        success: false,
        message: "Failed to authenticate with provided credentials"
      });
      
    } catch (error) {
      console.error("Authentication bridge error:", error);
      setAuthResult({
        success: false,
        message: "Authentication error: " + error.message
      });
    } finally {
      setIsProcessing(false);
      
      // Remove auth params from URL for security
      if (window.history && window.history.replaceState) {
        const cleanUrl = window.location.pathname + 
                         window.location.search.replace(/[?&](token|password|auth_payload|userEmail|emergency_bypass)=[^&]*/g, '') +
                         window.location.hash;
        window.history.replaceState({}, document.title, cleanUrl);
      }
    }
  }
  
  // This component doesn't render anything visible
  return null;
}

Step 2: Update Your App Component
Import and use the AuthBridge component in your main App.js file:

// In App.js or equivalent
import AuthBridge from './path-to/AuthBridge';

function App() {
  return (
    <AuthProvider> {/* Your existing auth provider */}
      <div className="app">
        {/* Include the AuthBridge component */}
        <AuthBridge />
        
        {/* Rest of your application */}
        <Router>
          {/* Your routes */}
        </Router>
      </div>
    </AuthProvider>
  );
}
Step 3: Add NeuroHealthDashboard Integration Buttons
Add buttons to share content back to NeuroHealthDashboard:

// In your Article or Content component
function ArticleComponent({ article }) {
  // Function to share article with NeuroHealthDashboard
  function shareToNeuroHealth() {
    const token = localStorage.getItem('auth_token');
    const userId = localStorage.getItem('user_id');
    
    // Create the URL with authentication and content data
    const url = new URL('https://neurohealthdashboard.replit.app/import-article');
    
    // Add auth params
    url.searchParams.append('token', token);
    url.searchParams.append('userId', userId);
    
    // Add content params
    url.searchParams.append('title', article.title);
    url.searchParams.append('content', article.content);
    url.searchParams.append('summary', article.summary);
    url.searchParams.append('source', 'article-gen-ai');
    
    // Open in new window
    window.open(url.toString(), '_blank');
  }
  
  return (
    <div className="article">
      <h2>{article.title}</h2>
      <div className="article-content">{article.content}</div>
      
      {/* Add share button */}
      <button onClick={shareToNeuroHealth} className="share-button">
        Share to NeuroHealthDashboard
      </button>
    </div>
  );
}

Step 4: Add User Authentication Endpoint (if not already present)
Ensure your API has an endpoint to validate credentials directly:

// Replace the hardcoded password approach with a more flexible solution:

// In your API routes file
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Special handling for known doctor accounts
    const knownDoctorEmails = [
      "doctornerves@gmail.com",
      "dr.ukzain@gmail.com", 
      "ponnusankar100@gmail.com"
    ];
    
    const isKnownDoctor = knownDoctorEmails.includes(email);
    
    // DEVELOPMENT ONLY: Fallback authentication for development/testing
    // In production, this should be removed or protected by environment flags
    if (process.env.NODE_ENV === 'development' && isKnownDoctor && password === "Doctor1234!") {
      console.log("Using development fallback authentication for doctor:", email);
      // Generate token and return user info
      // ... (same as before)
    }
    
    // PRODUCTION: Always check against your actual database first
    const user = await db.users.findOne({ email });
    
    if (user) {
      const passwordValid = await verifyPassword(password, user.passwordHash);
      
      if (passwordValid) {
        // Generate token and return success
        const token = generateToken();
        
        // If this is a known doctor, store the valid password for cross-app sync
        if (isKnownDoctor) {
          try {
            // Optional: Notify the parent app about password update
            fetch('https://neurohealthdashboard.replit.app/api/sync-password', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                email, 
                password,
                token: process.env.SYNC_SECRET // Use a secure shared secret
              })
            }).catch(err => console.log("Password sync notification failed - non-critical"));
          } catch (err) {
            // Non-critical error, just log it
            console.error("Failed to sync password:", err);
          }
        }
        
        return res.json({
          success: true,
          user: {
            id: user.id,
            email: user.email,
            name: user.name,
            type: user.type || 'user'
          },
          token,
          message: "Authentication successful"
        });
      }
    }
    
    // Normal authentication failed, but we have one more option for known doctors:
    // Try to authenticate via NeuroHealthDashboard's passwordless endpoint
    if (isKnownDoctor) {
      try {
        const neuroResponse = await fetch('https://neurohealthdashboard.replit.app/api/passwordless-auth', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, userType: 'admin' })
        });
        
        if (neuroResponse.ok) {
          const data = await neuroResponse.json();
          if (data.success) {
            return res.json({
              success: true,
              user: data.user,
              token: data.token,
              message: "Authentication successful via NeuroHealthDashboard",
              source: "passwordless"
            });
          }
        }
      } catch (err) {
        console.error("Passwordless auth attempt failed:", err);
        // Continue to standard failure response
      }
    }
    
    // Authentication failed
    return res.status(401).json({ 
      success: false, 
      message: "Invalid credentials" 
    });
    
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ success: false, message: "Authentication failed" });
  }
});

Step 5: Add Token Validation Endpoint (if needed)
To validate tokens from NeuroHealthDashboard:

app.post('/api/validate-token', async (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({ valid: false, message: "No token provided" });
    }
    
    // Check if token exists in your database
    // const tokenRecord = await db.tokens.findOne({ token });
    
    // If token is valid and not expired
    // if (tokenRecord && new Date(tokenRecord.expiresAt) > new Date()) {
    //   const user = await db.users.findOne({ id: tokenRecord.userId });
    //   
    //   if (user) {
    //     return res.json({
    //       valid: true,
    //       user: {
    //         id: user.id,
    //         email: user.email,
    //         name: user.name,
    //         type: user.type || 'user'
    //       }
    //     });
    //   }
    // }
    
    // For testing purposes, or if you want to skip database validation for known formats
    if (token.length >= 32) {
      // This is just for testing - replace with real validation in production
      return res.json({ 
        valid: true,
        message: "Token accepted (test mode)",
        user: {
          id: "test_user",
          email: "test@example.com",
          name: "Test User",
          type: "user"
        }
      });
    }
    
    return res.status(401).json({ valid: false, message: "Invalid or expired token" });
    
  } catch (error) {
    console.error("Token validation error:", error);
    res.status(500).json({ valid: false, message: "Validation error" });
  }
});

Troubleshooting Tips
If the integration doesn't work as expected:

Check browser console for authentication errors
Verify all required URL parameters are present
Check for CORS issues in the network tab
Ensure doctor accounts are present in both systems
Test with the "Doctor1234!" password for emergency bypass
Clear localStorage and try again if token validation fails repeatedly
Important Notes About This Integration
The passwordless authentication relies on URL parameters - make sure they're properly handled
Known doctor accounts have a "direct authentication" path for reliability
Multiple fallback mechanisms ensure doctors can always access the system
After authentication, clean the URL to remove sensitive parameters
Store tokens securely in localStorage for future sessions






Assistants

Medical Reference Analyzer
asst_hz0TL0OK0TqjiK4vQvCjVJXz

Medical Image Prompt Expert
asst_6ksmyYFAlZRShM2GGyGzgP87

Medical Content Generator
asst_5P6R2YfUBta9WTP0VFk8hDUI


TinyMCE API key: 1urn7qx4mgh5cvcvtfio1kkzo8rz2rkflfxe4kw687etal1u

sk-...65IA

Write a medical article targeted at patients, using simple language and clear explanations on the topic of migraine trigger factors; make a detailed list of known triggers; provide guidance on how to identify a trigger; the audience is patients or caregivers of patients with migraine; pay special attention to dietary items and list out some of the known dietary triggers of migraine; make the tone conversational and avoid using jargon. Include relevant facts and current medical knowledge.

Keywords: migraine, headache, trigger, cheese, tyramine, caffeine, menstrual migraine
Topic: Migraine trigger factors - how to identify them to redue migraine attacks

Simple diagram of the nervous system, showing the brain, the spinal cord, the cranial nerves and other peripheral nerves