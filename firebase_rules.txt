// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write their own data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      
      // User's questions
      match /my_questions/{questionId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Doctors collection
    match /doctors/{doctorId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && (
        request.auth.uid == doctorId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      );
      
      // Doctor's questions
      match /user_questions/{questionId} {
        allow read: if request.auth != null && (
          request.auth.uid == doctorId || 
          resource.data.userId == request.auth.uid
        );
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == doctorId;
      }
    }
    
    // Allow authenticated users to read/write questions
    match /questions/{questionId} {
      allow read: if request.auth != null || resource.data.isPublic == true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.doctorId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      );
    }
    
    // Allow authenticated users to read/write answers
    match /answers/{answerId} {
      allow read: if request.auth != null || 
                   get(/databases/$(database)/documents/questions/$(resource.data.questionId)).data.isPublic == true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.doctorId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      );
    }
  }
}

// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}